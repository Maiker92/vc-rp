#include <YSI\y_hooks>

#define MAX_TD_WORDS 50

new Float:characterWidths[][] = 
{
	{ 
		 0.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,
		12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,
		12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,
		12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,
		12.0, 13.0, 13.0, 28.0, 28.0, 28.0, 28.0,  8.0, // 0    ! " Ј $ % & '
		17.0, 17.0, 30.0, 28.0, 28.0, 12.0, 9.0,  21.0, // 8  ( ) * + , - . /
		28.0, 14.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, // 16 0 1 2 3 4 5 6 7
		28.0, 28.0, 13.0, 13.0, 30.0, 30.0, 30.0, 30.0, // 24 8 9 : ; < = > ?
		10.0, 25.0, 23.0, 21.0, 24.0, 22.0, 20.0, 24.0, // 64 - A B C D E F G
		24.0, 17.0, 20.0, 22.0, 20.0, 30.0, 27.0, 27.0, // 72 H I J K L M N O
		26.0, 26.0, 24.0, 23.0, 24.0, 31.0, 23.0, 31.0, // 80 P Q R S T U V W
		24.0, 23.0, 21.0, 28.0, 33.0, 33.0, 14.0, 28.0, // 88 X Y Z & \   i _
		10.0, 11.0, 12.0,  9.0, 11.0, 10.0, 10.0, 12.0, // 64 ! a b c d e f g
		12.0,  7.0,  7.0, 13.0,  5.0, 18.0, 12.0, 10.0, // 72 h i j k l m n o
		12.0, 11.0, 10.0, 12.0,  8.0, 13.0, 13.0, 18.0, // 80 p q r s t u v w
		17.0, 13.0, 12.0, 30.0, 30.0, 37.0, 35.0, 37.0, // 56 x y z
		25.0, 25.0, 25.0, 25.0, 33.0, 21.0, 24.0, 24.0, // 96 А Б В Г Ж З И Й 
		24.0, 24.0, 17.0, 17.0, 17.0, 17.0, 27.0, 27.0, // 104 К Л М Н О П Т У 
		27.0, 27.0, 31.0, 31.0, 31.0, 31.0, 11.0, 11.0, // 112 Ф Ц Щ Ъ Ы Ь Я а
		11.0, 11.0, 11.0, 20.0,  9.0, 10.0, 10.0, 10.0, // 120 б в г ж з и й к
		10.0,  7.0,  7.0,  7.0,  7.0, 10.0, 10.0, 10.0, // 128 л м н о п т у ф
		10.0, 13.0, 13.0, 13.0, 13.0, 27.0, 12.0, 30.0, // 136 ц щ ъ ы ь N n ?(upsidedown)
		27.0, 16.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, // 144 0 1 2 3 4 5 6 7
		27.0, 27.0, 18.0, 29.0, 26.0, 25.0, 28.0, 26.0, // 152 8 9 : A B C D E
		25.0, 27.0, 28.0, 12.0, 24.0, 25.0, 24.0, 30.0, // 160 F G H I J K L M
		27.0, 29.0, 26.0, 26.0, 25.0, 26.0, 25.0, 26.0, // 168 N O P Q R S T U
		28.0, 32.0, 27.0, 26.0, 26.0, 29.0, 29.0, 29.0, // 176 V W X Y Z А Б В
		29.0, 33.0, 25.0, 26.0, 26.0, 26.0, 26.0, 14.0, // 184 Г Ж З И Й К Л М
		14.0, 14.0, 14.0, 29.0, 29.0, 29.0, 29.0, 26.0, // 192 Н О П Т У Ф Ц Щ
		26.0, 26.0, 26.0, 21.0, 25.0, 30.0, 27.0, 27.0, // 200 Ъ Ы Ь Я С ї
		10.0
	},
	{
		 0.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
		15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
		15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
		15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
		15.0,  9.0, 17.0, 27.0, 20.0, 34.0, 23.0, 12.0, // 0    ! " Ј $ % & '
		12.0, 12.0, 21.0, 20.0, 12.0, 14.0, 12.0, 15.0, // 8  ( ) * + , - . /
		23.0, 15.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, // 16 0 1 2 3 4 5 6 7
		20.0, 21.0, 12.0, 12.0, 24.0, 24.0, 24.0, 19.0, // 24 8 9 : ; < = > ?
		10.0, 22.0, 19.0, 19.0, 22.0, 16.0, 19.0, 24.0, // 32 tmA B C D E F G
		22.0, 11.0, 16.0, 21.0, 15.0, 28.0, 24.0, 27.0, // 40 H I J K L M N O
		20.0, 25.0, 19.0, 19.0, 18.0, 23.0, 23.0, 31.0, // 48 P Q R S T U V W
		23.0, 19.0, 21.0, 21.0, 13.0, 35.0, 11.0, 21.0, // 56 X Y Z       ! _
		10.0, 19.0, 20.0, 14.0, 20.0, 19.0, 13.0, 20.0, // 64 ! a b c d e f g
		19.0,  9.0,  9.0, 19.0,  9.0, 29.0, 19.0, 21.0, // 72 h i j k l m n o
		19.0, 19.0, 15.0, 15.0, 14.0, 18.0, 19.0, 27.0, // 80 p q r s t u v w
		20.0, 20.0, 17.0, 21.0, 17.0, 20.0, 15.0, 15.0, // 88 x y z     $ [ ]
		22.0, 22.0, 22.0, 22.0, 29.0, 19.0, 16.0, 16.0, // 96 А Б В Г Ж З И Й
		16.0, 16.0, 11.0, 11.0, 11.0, 11.0, 27.0, 27.0, // 104 К Л М Н О П Т У
		27.0, 27.0, 23.0, 23.0, 23.0, 23.0, 20.0, 19.0, // 112 Ф Ц Щ Ъ Ы Ь Я а
		19.0, 19.0, 19.0, 30.0, 14.0, 19.0, 19.0, 19.0, // 120 б в г ж з и й к
		19.0,  9.0,  9.0,  9.0,  9.0, 21.0, 21.0, 21.0, // 128 л м н о п т у ф
		21.0, 18.0, 18.0, 18.0, 18.0, 24.0, 19.0, 19.0, // 136 ц щ ъ ы ь С с ї
		20.0, 18.0, 19.0, 19.0, 21.0, 19.0, 19.0, 19.0, // 144 0 1 2 3 4 5 6 7
		19.0, 19.0, 16.0, 19.0, 19.0, 19.0, 20.0, 19.0, // 152 8 9 : A B C D E
		16.0, 19.0, 19.0,  9.0, 19.0, 20.0, 14.0, 29.0, // 160 F G H I J K L M
		19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 21.0, 19.0, // 168 N O P Q R S T U
		20.0, 32.0, 21.0, 19.0, 19.0, 19.0, 19.0, 19.0, // 176 V W X Y Z А Б В
		19.0, 29.0, 19.0, 19.0, 19.0, 19.0, 19.0,  9.0, // 184 Г Ж З И Й К Л М
		 9.0,  9.0,  9.0, 19.0, 19.0, 19.0, 19.0, 19.0, // 192 Н О П Т У Ф Ц Щ
		19.0, 19.0, 19.0, 19.0, 21.0, 19.0, 10.0,  9.0, // 200 Ъ Ы Ь Я С ї ' .
		10.0
	},
	{
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0
	},
	{
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0
	}
};


hook OnScriptInit()
{
	for (new font = 2; font < 4; font++)
	{
		for (new c = 0; c < sizeof (characterWidths[]); c++)
		{
			new c2 = c;
			switch (c)
			{
				case 0x3A: c2 = 0xBA;
				case 0x28, 0x29: c2 += 0x56;
				case 0x24: c2 = 0x7D;
				case 0x27: c2 = 0xEE;
				case 0x2E: c2 = 0xEF;
				case 0x21: c2 = 0xF0;
				default: goto font2_not_done;
			}
			goto font2_done;
			font2_not_done:
			switch (c)
			{
				case 0xAF: c2 = 0xED;
				case 0x3F: c2 = 0x7B;
				case 0x26: c2 = 0x2A;
				case 0x5E: c2 = 0x40;
				case 0xAD, 0xAE: c2 = 0xEC;
				default:
				{
					if (0x30 <= c <= 0x39) c2 += 0x80;
					else if (0x41 <= c <= 0x5A) c2 += 0x7A;
					else if (0x61 <= c <= 0x7A) c2 += 0x5A;
					else if (0x80 <= c <= 0x96) c2 += 0x55;
					else if (0x97 <= c <= 0xAC) c2 += 0x3E;
				}
			}
			font2_done:
			new font2 = font - 2;
			characterWidths[font][c] = characterWidths[font2][c2];
		}
	}
	return 1;
}

stock Float:GetTdCharacterWidth(font, c, bool:prop, Float:outline, Float:fontx)
{
	if (font > 3) return 0.0;
	else if (prop)
	{
		if (font < 2)
		{
			if (c == 0xB1) c = 0x60;
			else if (c > 0xBB) c = 0x20;
		}
		if (0 < c < sizeof (characterWidths[])) return (characterWidths[font][c] + outline) * fontx;
		else return (characterWidths[font][sizeof (characterWidths[]) - 1] + outline) * fontx;
	}
	else return ((font & 1 ? 20.0 : 27.0) + outline) * fontx;
}


stock GetTdLines(font, string[], bool:prop, Float:outline, Float:fontx, Float:sizex)
{
	new lines = 1, Float:width, words, Float:word_size[MAX_TD_WORDS], bool:special_char;
	for (new i = 0; string[i]; i++)
	{
		if(!special_char)
		{
			if(string[i] == '~')
			{
				special_char = true;
				word_size[words++] = width;
				width = 0.0;
			}
			else
			{
				if(string[i] == ' ')
				{
					word_size[words++] = width;
					width = GetTdCharacterWidth(font, string[i], prop, outline, fontx);
				}
				else width += GetTdCharacterWidth(font, string[i], prop, outline, fontx);
			}
		}
		else
		{
			if(string[i] == 'n') word_size[words++] = -1.0;
			else if(string[i] == '~') special_char = false;
		}
	}
	word_size[words++] = width;
	width = 0.0;

	new cur;
	while(cur != words)
	{
		if(word_size[cur] == -1.0)
		{
			width = 0.0;
			lines++;
		}
		else width += word_size[cur];
		cur++;
		
		if(width > sizex)
		{
			width = 0.0;
			cur--;
			lines++;
		}
	}
	return lines;
}

stock Float:GetTdTextSizeX(font, string[], bool:prop, Float:outline, Float:fontx)
{
	new Float:width;
	for(new i = 0; string[i]; i ++)
	{
		width += GetTdCharacterWidth(font, string[i], prop, outline, fontx);
	}
	return width;
}

stock Float:GetTdTextFontX(font, string[], bool:prop, Float:outline, Float:sizex)
{
	new Float:base_sizex, Float:base_fontx = 1.0;
	for(new i = 0; string[i]; i ++)
	{
		base_sizex += GetTdCharacterWidth(font, string[i], prop, outline, base_fontx);
	}
	//calc
	new Float:fontx = floatdiv(base_fontx, floatdiv(base_sizex, sizex));
	fontx -= 0.005;
	return fontx;
}